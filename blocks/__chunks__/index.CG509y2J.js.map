{"version":3,"file":"index.CG509y2J.js","sources":["../../src/utils/index.ts"],"sourcesContent":["export async function loadFragment(path: string) {\n    if (path) {\n        const resp = await fetch(`${path}.plain.html`);\n        if (resp.ok) {\n            const main = document.createElement('main');\n            main.innerHTML = await resp.text();\n            return main;\n        }\n    }\n    return null;\n}\n\n/**\n * Returns a picture element with webp and fallbacks\n * @param {string} src The image URL\n * @param {string} [alt] The image alternative text\n * @param {boolean} [eager] Set loading attribute to eager\n * @param {Array} [breakpoints] Breakpoints and corresponding params (eg. width)\n * @returns {Element} The picture element\n */\nexport const createOptimizedPicture = (\n    pictureEl: HTMLPictureElement | null | undefined,\n    eager = false,\n    breakpoints = [{ media: '(min-width: 600px)', width: '2000' }, { width: '750' }],\n) => {\n    if (!pictureEl) return null;\n    const img = pictureEl.querySelector('img')\n    const src = img?.getAttribute('src')\n\n    if (!src) return null;\n    const alt = img?.getAttribute('alt') || '';\n\n    const url = new URL(src, window.location.href);\n    const picture = document.createElement('picture');\n    const { pathname } = url;\n    const ext = pathname.substring(pathname.lastIndexOf('.') + 1);\n\n    // webp\n    breakpoints.forEach((br) => {\n        const source = document.createElement('source');\n        if (br.media) source.setAttribute('media', br.media);\n        source.setAttribute('type', 'image/webp');\n        source.setAttribute('srcset', `${pathname}?width=${br.width}&format=webply&optimize=medium`);\n        picture.appendChild(source);\n    });\n\n    // fallback\n    breakpoints.forEach((br, i) => {\n        if (i < breakpoints.length - 1) {\n            const source = document.createElement('source');\n            if (br.media) source.setAttribute('media', br.media);\n            source.setAttribute('srcset', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n            picture.appendChild(source);\n        } else {\n            const img = document.createElement('img');\n            img.setAttribute('loading', eager ? 'eager' : 'lazy');\n            img.setAttribute('alt', alt);\n            picture.appendChild(img);\n            img.setAttribute('src', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n        }\n    });\n\n    return picture;\n}\n"],"names":["loadFragment","path","resp","main","createOptimizedPicture","pictureEl","eager","breakpoints","img","src","alt","url","picture","pathname","ext","br","source","i"],"mappings":"AAAA,eAAsBA,EAAaC,EAAc,CAC7C,GAAIA,EAAM,CACN,MAAMC,EAAO,MAAM,MAAM,GAAGD,CAAI,aAAa,EAC7C,GAAIC,EAAK,GAAI,CACH,MAAAC,EAAO,SAAS,cAAc,MAAM,EACrC,OAAAA,EAAA,UAAY,MAAMD,EAAK,KAAK,EAC1BC,CACX,CACJ,CACO,OAAA,IACX,CAUO,MAAMC,EAAyB,CAClCC,EACAC,EAAQ,GACRC,EAAc,CAAC,CAAE,MAAO,qBAAsB,MAAO,MAAO,EAAG,CAAE,MAAO,KAAO,CAAA,IAC9E,CACG,GAAA,CAACF,EAAkB,OAAA,KACjB,MAAAG,EAAMH,EAAU,cAAc,KAAK,EACnCI,EAAMD,GAAA,YAAAA,EAAK,aAAa,OAE1B,GAAA,CAACC,EAAY,OAAA,KACjB,MAAMC,GAAMF,GAAA,YAAAA,EAAK,aAAa,SAAU,GAElCG,EAAM,IAAI,IAAIF,EAAK,OAAO,SAAS,IAAI,EACvCG,EAAU,SAAS,cAAc,SAAS,EAC1C,CAAE,SAAAC,CAAa,EAAAF,EACfG,EAAMD,EAAS,UAAUA,EAAS,YAAY,GAAG,EAAI,CAAC,EAGhD,OAAAN,EAAA,QAASQ,GAAO,CAClB,MAAAC,EAAS,SAAS,cAAc,QAAQ,EAC1CD,EAAG,OAAOC,EAAO,aAAa,QAASD,EAAG,KAAK,EAC5CC,EAAA,aAAa,OAAQ,YAAY,EACxCA,EAAO,aAAa,SAAU,GAAGH,CAAQ,UAAUE,EAAG,KAAK,gCAAgC,EAC3FH,EAAQ,YAAYI,CAAM,CAAA,CAC7B,EAGWT,EAAA,QAAQ,CAACQ,EAAIE,IAAM,CACvB,GAAAA,EAAIV,EAAY,OAAS,EAAG,CACtB,MAAAS,EAAS,SAAS,cAAc,QAAQ,EAC1CD,EAAG,OAAOC,EAAO,aAAa,QAASD,EAAG,KAAK,EAC5CC,EAAA,aAAa,SAAU,GAAGH,CAAQ,UAAUE,EAAG,KAAK,WAAWD,CAAG,kBAAkB,EAC3FF,EAAQ,YAAYI,CAAM,CAAA,KACvB,CACGR,MAAAA,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,aAAa,UAAWF,EAAQ,QAAU,MAAM,EACpDE,EAAI,aAAa,MAAOE,CAAG,EAC3BE,EAAQ,YAAYJ,CAAG,EACvBA,EAAI,aAAa,MAAO,GAAGK,CAAQ,UAAUE,EAAG,KAAK,WAAWD,CAAG,kBAAkB,CACzF,CAAA,CACH,EAEMF,CACX"}