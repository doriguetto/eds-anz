{"version":3,"file":"image.Dn3BGr21.js","sources":["../../src/blocks/hero/image.tsx"],"sourcesContent":["import {useEffect, useState} from \"react\";\n\nexport type ImageBreakpoint = {\n    media?: string;\n    width: string;\n};\n\nexport type ImageSource = {\n    type: string;\n    srcSet: string;\n    media?: string;\n};\n\nexport type ImagePreloaderProps = {\n    breakpoints?: ImageBreakpoint[];\n    pictureEl: HTMLPictureElement | null | undefined,\n    lazy?: boolean;\n    preload?: boolean;\n    ext?: string;\n};\n\nconst ImagePreloader = ({breakpoints = [], lazy = false, preload = false, pictureEl, ext = 'webp'}: ImagePreloaderProps) => {\n    const [sources, setSources] = useState<ImageSource[]>([]);\n    if (!pictureEl) return null;\n    const img = pictureEl.querySelector('img')\n    const imgElSrc = img?.getAttribute('src')\n\n    if (!imgElSrc) return null;\n    const alt = img?.getAttribute('alt') || '';\n    const width = img?.getAttribute('width') || 0;\n    const height = img?.getAttribute('height') || 0;\n\n    const url = new URL(imgElSrc, window.location.href);\n    const { pathname} = url;\n    const pathWithoutExtension = pathname.substring(0,pathname.lastIndexOf('.') );\n    const imgSrc = `${pathWithoutExtension}.${ext}?width=2048&amp;format=jpeg&amp;optimize=medium`\n\n    useEffect(() => {\n\n        setSources(breakpoints.map((breakpoint) => {\n            const srcSet = `${pathWithoutExtension}.${ext}?width=${breakpoint.width}&format=webply&optimize=medium`\n            return {\n                type: 'image/webp',\n                srcSet: srcSet,\n                media: breakpoint.media\n            }\n        }))\n    }, []);\n\n    return (\n        <>\n            {preload && (\n                <>\n                    {sources.map((source, index) => (\n                        <link rel=\"preload\" as=\"image\" media={source.media} href={source.srcSet} key={index}></link>\n                    ))}\n                </>\n            )}\n            <picture>\n                {sources.map((source, index) => (\n                    <>\n                        <source key={index} media={source.media} type={source.type} srcSet={source.srcSet}/>\n                    </>\n                ))}\n                <img\n                    loading={lazy ? 'lazy' : 'eager'}\n                    alt={alt}\n                    width={width}\n                    height={height}\n                    src={imgSrc}\n                />\n            </picture>\n        </>\n    );\n};\n\nexport default ImagePreloader;"],"names":["ImagePreloader","breakpoints","lazy","preload","pictureEl","ext","sources","setSources","useState","img","imgElSrc","alt","width","height","url","pathname","pathWithoutExtension","imgSrc","useEffect","breakpoint","jsxs","Fragment","jsx","source","index"],"mappings":"gDAqBA,MAAMA,EAAiB,CAAC,CAAC,YAAAC,EAAc,CAAA,EAAI,KAAAC,EAAO,GAAO,QAAAC,EAAU,GAAO,UAAAC,EAAW,IAAAC,EAAM,UAAiC,CACxH,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAA,SAAwB,CAAE,CAAA,EACpD,GAAA,CAACJ,EAAkB,OAAA,KACjB,MAAAK,EAAML,EAAU,cAAc,KAAK,EACnCM,EAAWD,GAAA,YAAAA,EAAK,aAAa,OAE/B,GAAA,CAACC,EAAiB,OAAA,KACtB,MAAMC,GAAMF,GAAA,YAAAA,EAAK,aAAa,SAAU,GAClCG,GAAQH,GAAA,YAAAA,EAAK,aAAa,WAAY,EACtCI,GAASJ,GAAA,YAAAA,EAAK,aAAa,YAAa,EAExCK,EAAM,IAAI,IAAIJ,EAAU,OAAO,SAAS,IAAI,EAC5C,CAAE,SAAAK,CAAY,EAAAD,EACdE,EAAuBD,EAAS,UAAU,EAAEA,EAAS,YAAY,GAAG,CAAE,EACtEE,EAAS,GAAGD,CAAoB,IAAIX,CAAG,kDAE7Ca,OAAAA,EAAAA,UAAU,IAAM,CAEDX,EAAAN,EAAY,IAAKkB,IAEjB,CACH,KAAM,aACN,OAHW,GAAGH,CAAoB,IAAIX,CAAG,UAAUc,EAAW,KAAK,iCAInE,MAAOA,EAAW,KAAA,EAEzB,CAAC,CACN,EAAG,CAAE,CAAA,EAIIC,EAAA,KAAAC,WAAA,CAAA,SAAA,CACGlB,GAAAmB,EAAA,IAAAD,WAAA,CACK,WAAQ,IAAI,CAACE,EAAQC,IAClBF,EAAA,IAAC,QAAK,IAAI,UAAU,GAAG,QAAQ,MAAOC,EAAO,MAAO,KAAMA,EAAO,MAAa,EAAAC,CAAO,CACxF,CACL,CAAA,SAEH,UACI,CAAA,SAAA,CAAAlB,EAAQ,IAAI,CAACiB,EAAQC,IAEdF,EAAAA,IAAAD,EAAA,SAAA,CAAA,SAAAC,MAAC,UAAmB,MAAOC,EAAO,MAAO,KAAMA,EAAO,KAAM,OAAQA,EAAO,MAA9D,EAAAC,CAAqE,EACtF,CACH,EACDF,EAAA,IAAC,MAAA,CACG,QAASpB,EAAO,OAAS,QACzB,IAAAS,EACA,MAAAC,EACA,OAAAC,EACA,IAAKI,CAAA,CACT,CAAA,EACJ,CACJ,CAAA,CAAA,CAER"}